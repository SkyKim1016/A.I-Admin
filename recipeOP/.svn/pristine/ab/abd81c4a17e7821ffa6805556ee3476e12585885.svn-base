package com.onethefull.recipe.controller;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.onethefull.recipe.comm.ErrorCode;
import com.onethefull.recipe.comm.ResultWithData;
import com.onethefull.recipe.comm.auth.User;
import com.onethefull.recipe.req.FridgeIngrReq;
import com.onethefull.recipe.req.RecipeReq;
import com.onethefull.recipe.service.RecipeService;
import com.onethefull.recipe.type.FridgeIngrType;

@Controller
@RequestMapping("/rapi/recipe")
public class RecipeController extends BaseController {

	@Resource(name = "recipeService")
	private RecipeService recipeService;

	@RequestMapping(value = "/{recipeId}", method = RequestMethod.POST)
	@ResponseBody
	public ResultWithData getUserStuffOwningList(@PathVariable String recipeId, HttpServletRequest request,
			@RequestBody RecipeReq req) {
		req.setRecipeId(recipeId);
		return recipeService.getRecipeDetail(req);
	}

	/*
	 * 냉장고 식자재 정보 가져오기(데모용)
	 * parameter : RecipeReq
	 * 2016-4-20
	 * 김성준
	 */
	@Deprecated
	@RequestMapping(value = "/fridgeIngr", method = RequestMethod.POST)
	@ResponseBody
	public ResultWithData getFridgeIngrDemo(HttpServletRequest request, @RequestBody RecipeReq recipeReq) {
		FridgeIngrReq fridgeIngrReq = new FridgeIngrReq();
		fridgeIngrReq.setUserId(recipeReq.getUserId());
		return recipeService.getFridgeIngr(fridgeIngrReq);
	}
	
	/*
	 * 냉장고 식자재 정보 가져오기
	 * parameter : RecipeReq
	 * 2016-5-23
	 * 김성준
	 */
	@RequestMapping(value = "/fridgeIngr", method = RequestMethod.GET)
	@ResponseBody
	public ResultWithData getFridgeIngr(HttpServletRequest request) {
		User user = this.getUser(request);
		if (user == null || user.getId() == null || user.getId().isEmpty()) {
			return ResultWithData.failuerResult().setCode(ErrorCode.NEED_LOGIN).setMessage("login is needed");
		}
		FridgeIngrReq fridgeIngrReq = new FridgeIngrReq();
		fridgeIngrReq.setUserId(user.getId());
		return recipeService.getFridgeIngr(fridgeIngrReq);
	}
	
	/*
	 * 냉장고 식자재 정보 수정하기
	 * parameter : RecipeReq
	 * 2016-5-23
	 * 김성준
	 */
	@RequestMapping(value = "/fridgeIngr", method = RequestMethod.PUT)
	@ResponseBody
	public ResultWithData updateFridgeIngr(HttpServletRequest request, @RequestBody FridgeIngrReq fridgeIngrReq) {
		User user = this.getUser(request);
		if (user == null || user.getId() == null || user.getId().isEmpty()) {
			return ResultWithData.failuerResult().setCode(ErrorCode.NEED_LOGIN).setMessage("login is needed");
		}
		fridgeIngrReq.setUserId(user.getId());
		fridgeIngrReq.setType(FridgeIngrType.UPDATE);
		return recipeService.updateFridgeIngr(fridgeIngrReq);
	}
	
	/*
	 * 냉장고 식자재 정보 삭제하기
	 * parameter : RecipeReq
	 * 2016-5-23
	 * 김성준
	 */
	@RequestMapping(value = "/fridgeIngr", method = RequestMethod.DELETE)
	@ResponseBody
	public ResultWithData deleteFridgeIngr(HttpServletRequest request, @RequestBody FridgeIngrReq fridgeIngrReq) {
		User user = this.getUser(request);
		if (user == null || user.getId() == null || user.getId().isEmpty()) {
			return ResultWithData.failuerResult().setCode(ErrorCode.NEED_LOGIN).setMessage("login is needed");
		}
		fridgeIngrReq.setUserId(user.getId());
		fridgeIngrReq.setType(FridgeIngrType.DELETE);
		return recipeService.updateFridgeIngr(fridgeIngrReq);
	}
}