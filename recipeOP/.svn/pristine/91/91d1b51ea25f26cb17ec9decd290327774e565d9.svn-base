package com.onethefull.recipe.comm.service;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.onethefull.recipe.comm.ErrorCode;
import com.onethefull.recipe.comm.ResultWithData;
import com.onethefull.recipe.mapper.FriendshipMapper;
import com.onethefull.recipe.req.FriendshipReq;
import com.onethefull.recipe.vo.FriendVO;

@Service("friendshipService")
public class FriendshipService {
	
	@Resource(name = "friendshipMapper")
	private FriendshipMapper friendshipMapper;
	
	public ResultWithData getFriends(FriendshipReq req) {
		List<FriendVO> list = friendshipMapper.getFriends(req);
		return ResultWithData.succcessResult().addData("list", list);
	}	
	
	public ResultWithData actFriendship(FriendshipReq req) {
		try {
			friendshipMapper.actFriendship(req);
			
		} catch (Exception e) {
			return  ResultWithData.failuerResult();
		}
		
		String message = "";
		if(req.getResultCode() == ErrorCode.FRIENDSHIP_ALREADY_SETUP) {
			message = "he(she) is already your friend";
		} else if(req.getResultCode() == ErrorCode.FRIENDSHIP_ALREADY_ON_REQUESTING) {
			message = "request for friendship is already on going";			
		} else if(req.getResultCode() == ErrorCode.FRIENDSHIP_ALREADY_SETUP_ON_REJECT) {
			message = "reject is invalid, he(she) is already your friend.";
		} else if(req.getResultCode() == ErrorCode.FRIENDSHIP_ALREADY_SETUP_ON_CANCEL) {
			message = "cancel is invalid, he(she) is already your friend";
		} else if(req.getResultCode() != 0 )  {
			message = "DB or Networ error";
		}
		
		if(!message.isEmpty()) {
			return ResultWithData.failuerResult().setCode(req.getResultCode()).setMessage(message);
		}
		
		return ResultWithData.succcessResult();
	}	
}
