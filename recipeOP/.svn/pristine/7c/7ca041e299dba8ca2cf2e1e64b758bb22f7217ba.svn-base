package com.onethefull.recipe.comm.service;

import java.io.UnsupportedEncodingException;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.onethefull.recipe.comm.ErrorCode;
import com.onethefull.recipe.comm.ResultWithData;
import com.onethefull.recipe.comm.auth.User;
import com.onethefull.recipe.comm.util.CommonUtil;
import com.onethefull.recipe.mapper.UserAuthMapper;
import com.onethefull.recipe.req.AuthTokenReq;
import com.onethefull.recipe.req.UserReq;
import com.onethefull.recipe.req.UserServiceProviderInfoReq;

@Service("userService")
public class UserService {
	
	@Resource(name = "userAuthMapper")
	private UserAuthMapper userAuthMapper;
	
	//token을 이용해서 user정보를 반환 
	public User getForSession(String authToken) {
		
		// token 생성 , 저장 및 전달		
		//String authToken = "";
		//현대는 token이 없기에 하드코딩으로 테스트용으로 한다 
		//authToken = "e0d3b72f72183185c11356d4f280ceceb336622fbab3b4f4fbe6af73ca4dbcbc";
		
		User user =  new User();
		user.setAuthToken(authToken);
		
		try  { 
			user = userAuthMapper.getUserbyAuthToken(user);
		} catch (Exception e) {
			//return ErrorCode.DB_ERROR;
			return null;
		}
		
		return user;
	}
	
	public ResultWithData login(User user) {
		// 유효한 token 이라면 그대로 유지
		// 유효하지 않다면 아이디, 비번 체크하여 인증되면 token 생성, 저장 후 전달
		
		int errcode = this.findUserbyIdPasword(user.getId(), user.getLoginId(), user.getPassword(), user);
		String errMessage = "";
		
		switch(errcode) {
		case ErrorCode.ILLEGAL_PROCESS : errMessage = "Id or password is needed"; break;
		case ErrorCode.DB_ERROR : errMessage = "Error! DB or Network error"; break;
		case ErrorCode.INVALID_PARAMETER : errMessage = "ID or password is invalid"; break;
		}
		
		if(errcode != 0) {
			return ResultWithData.failuerResult().setCode(errcode).setMessage(errMessage);
		}
		
		try {
			user = saveAuthToken(user.getId());
		} catch (Exception e) {
			errMessage = "Error! DB or Network error";
			return ResultWithData.failuerResult().setCode(ErrorCode.DB_ERROR).setMessage(errMessage);
		}
		
		if(errcode != 0) {
			errMessage = "Error! DB or Network error";
			return ResultWithData.failuerResult().setCode(ErrorCode.DB_ERROR).setMessage(errMessage);			
		}

		return ResultWithData.succcessResult().addData("user", user).addData("auth_token", user.getAuthToken());
	}
	
	
	public User saveAuthToken(String userId) {
		// token 생성 , 저장 및 전달		
		String authToken = "";
		User user = null;
		try {
			authToken = CommonUtil.transSHA256(userId);
			AuthTokenReq req = new AuthTokenReq(userId, authToken);
			userAuthMapper.setAuthToken(req);
			user =  new User(userId, authToken);
			user = userAuthMapper.getUserbyAuthToken(user);
		} catch (Exception e) {
			return null;
		}
		
		return user;
	}

	
	public ResultWithData findUserbyIdPasword(String loginId, String password) {
		
		User user = new User();
		user.setLoginId(loginId);
		user.setPassword(password);
		int errcode = this.findUserbyIdPasword(null, loginId, password, user);
		String errMessage = "";
		
		switch(errcode) {
		case ErrorCode.ILLEGAL_PROCESS : errMessage = "Id or password is needed"; break;
		case ErrorCode.DB_ERROR : errMessage = "Error! DB or Network error"; break;
		case ErrorCode.INVALID_PARAMETER : errMessage = "ID or password is invalid"; break;
		}
		
		if(errcode == 0) {
			return ResultWithData.failuerResult().setCode(errcode).setMessage(errMessage);
		}
		
		return ResultWithData.succcessResult().addData("user", user);
	}

	public int findUserbyIdPasword(String id, String loginId, String password, User user) {
		// 아이디가 없응 겨웅
		// 비번이 없응 경우
		// 아이디 비번이 안 맞을 경우
		
		int errcode = 0;
		
		if(loginId == null || loginId.trim().length() == 0 || password == null || password.trim().length() == 0) {
			return ErrorCode.ILLEGAL_PROCESS;
		}
		
		User result =  null; 
		
		try  { 
			UserReq req = new UserReq(loginId, password);
			result = userAuthMapper.findUserbyIdPassword(req);
		} catch (Exception e) {
			return ErrorCode.DB_ERROR;
		}
		
		if(result == null ) {
			return ErrorCode.INVALID_PARAMETER;			
		}
		
		user.setId(result.getId());
		user.setName(result.getName());
		
		return errcode;
	}

	public ResultWithData createSPUserByServiceProviderInfo(UserServiceProviderInfoReq req) throws UnsupportedEncodingException {
		try  { 
			userAuthMapper.setUserServiceProviderInfo(req);
		} catch (Exception e) {
			return ResultWithData.failuerResult();
		}
		
		String authToken = "";
		String userId = req.getUserInfo().getId();
		
		try {
			authToken = CommonUtil.transSHA256(userId);
			AuthTokenReq tokenReq = new AuthTokenReq(userId, authToken);
			userAuthMapper.setAuthToken(tokenReq);
		} catch (Exception e) {
			return  ResultWithData.failuerResult();
		}
		
		User user = new User();
		user.setEmail(req.getUserInfo().getEmail());
		user.setLoginId(req.getUserInfo().getLoginId());
		user.setName(req.getUserInfo().getName());
		user.setMobile(req.getUserInfo().getMobile());
		user.setGender(req.getUserInfo().getGender());
		user.setId(req.getUserInfo().getId());
		return ResultWithData.succcessResult().addData("me", user).addData("auth_token", authToken);
	}

}
