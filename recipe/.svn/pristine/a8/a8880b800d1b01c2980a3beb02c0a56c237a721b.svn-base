package com.onethefull.recipe.service;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.sql.SQLException;

import javax.annotation.Resource;
import javax.imageio.ImageIO;

import org.apache.commons.io.output.ByteArrayOutputStream;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import com.onethefull.recipe.comm.ErrorCode;
import com.onethefull.recipe.comm.ResultWithData;
import com.onethefull.recipe.comm.service.MailService;
import com.onethefull.recipe.comm.util.RecipeParser;
import com.onethefull.recipe.comm.util.S3Client;
import com.onethefull.recipe.comm.vo.MailContext;
import com.onethefull.recipe.mapper.UploadMapper;
import com.onethefull.recipe.req.ConditionReq;
import com.onethefull.recipe.req.RecipeReq;
import com.onethefull.recipe.req.UploadReq;
import com.onethefull.recipe.type.ImageType;
import com.onethefull.recipe.type.UploadType;
import com.onethefull.recipe.vo.UploadVO;

import net.coobird.thumbnailator.Thumbnails;

@Service("uploadService")
public class UploadService {

	@Resource(name = "uploadMapper")
	private UploadMapper uploadMapper;

	@Resource(name = "mailService")
	private MailService mailService;
	
	@Autowired
	private S3Client s3Client;

	public ResultWithData insertCondition(final ConditionReq conditionReq) {
		ResultWithData resultWithData = ResultWithData.succcessResult();
		resultWithData = this.saveFileS3(UploadType.CONDITION, conditionReq, resultWithData);
		//TODO sendMail Logic
		//this.sendInsertConditionMail();
		return resultWithData;
	}

	@SuppressWarnings("finally")
	public ResultWithData insertRecipe(RecipeReq recipeReq) {
		ResultWithData resultWithData = ResultWithData.succcessResult();
		resultWithData = this.saveFileS3(UploadType.RECIPE, recipeReq, resultWithData);
		/*
		int result = uploadMapper.insertRecipe(recipeReq);
		if (result != 0) {
			resultWithData.setCode(ErrorCode.FAIL).setMessage("Image Upload Error");
		}
		 */
		try {
			RecipeParser RP = new RecipeParser();
			UploadVO uploadVO = (UploadVO) resultWithData.getData("result");
			if(!RP.insertMaster(recipeReq.getCsv().getInputStream(), uploadVO)) {
				resultWithData.setCode(ErrorCode.FAIL).setMessage("CSV Upload DB Error");
			}
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			resultWithData.setCode(ErrorCode.FAIL).setMessage("CSV File not found Error");
		} finally {
			return resultWithData;
		}
	}

	@SuppressWarnings("finally")
	private ResultWithData saveFileS3(final UploadType type, final UploadReq uploadReq, ResultWithData resultWithData) {
		if (uploadReq == null) {
			resultWithData = ResultWithData.failuerResult().setCode(ErrorCode.FILE_WRITE_ERROR)
					.setMessage("Error writing file");
			return resultWithData;
		}
		try {
			UploadVO uploadVO = new UploadVO();
			String fileName = uploadReq.getFile().getOriginalFilename();
			String text;
			String uploadPath = type.toString();
			if (UploadType.RECIPE.equals(type)) {
				fileName = new ObjectId().toString();
				uploadPath += "/MST";
				text = s3Client.uploadImage(String.format("%s/%s", uploadPath, String.format("%s_thumb", fileName)),
						this.convertToQuality(uploadReq.getFile().getInputStream(), ImageType.THUMBNAIL));
				uploadVO = this.setUploadVO(ImageType.THUMBNAIL, uploadVO, this.getS3UrltoString(text));
			}
			text = this.s3Client.uploadImage(String.format("%s/%s", uploadPath, fileName),
					this.convertToQuality(uploadReq.getFile().getInputStream(), ImageType.ORIGINAL));
			uploadVO = this.setUploadVO(ImageType.ORIGINAL, uploadVO, this.getS3UrltoString(text));
			resultWithData.addData("result", uploadVO);
		} catch (IllegalStateException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			resultWithData = ResultWithData.failuerResult().setCode(ErrorCode.FILE_WRITE_ERROR)
					.setMessage("Error writing file");
		} finally {
			return resultWithData;
		}
	}

	private String getS3UrltoString(final String urlString) {
		int index = urlString.indexOf("?");
		return urlString.substring(0, index);
	}

	private UploadVO setUploadVO(final ImageType imageType, UploadVO uploadVO, final String imageUrl) {
		if(!StringUtils.isEmpty(imageUrl)) {
			switch (imageType) {
				case MIDDLE:
					uploadVO.setImageMiddlePath(imageUrl);
					break;
				case THUMBNAIL:
					uploadVO.setImageThumbPath(imageUrl);	
					break;
				default:
					uploadVO.setImageOriginalPath(imageUrl);
					break;
			}
		}
		return uploadVO;
	}

	private InputStream convertToQuality(InputStream imageFile, ImageType imageType) throws IOException {
		if(imageType == null) {
			imageType = ImageType.defaultImageType();
		}
		switch (imageType) {
			case MIDDLE:
				imageFile = this.makeToMiddle(ImageIO.read(imageFile));
				break;
			case THUMBNAIL:
				imageFile = this.makeToThumb(ImageIO.read(imageFile));	
				break;
			default:
				
				break;
		}
		return imageFile;
	}
	
	private InputStream makeToThumb(BufferedImage bufferedImage) throws IOException {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		//Thumbnails.of(bufferedImage).size(150, 150).outputQuality(0.5f).outputFormat("jpeg").toOutputStream(os);
		Thumbnails.of(bufferedImage).scale(0.05f, 0.05f).outputQuality(0.5f).outputFormat("jpeg").toOutputStream(os);
		InputStream inputStream = new ByteArrayInputStream(os.toByteArray());
		return inputStream;
	}

	private InputStream makeToMiddle(BufferedImage bufferedImage) throws IOException {
		ByteArrayOutputStream os = new ByteArrayOutputStream();
		//Thumbnails.of(bufferedImage).size(500, 500).outputQuality(0.5f).outputFormat("jpeg").toOutputStream(os);
		Thumbnails.of(bufferedImage).scale(0.2f, 0.2f).outputQuality(0.5f).outputFormat("jpeg").toOutputStream(os);
		InputStream inputStream = new ByteArrayInputStream(os.toByteArray());
		return inputStream;
	}

	private ResultWithData sendInsertConditionMail() {
		MailContext mailContext = new MailContext();
		mailContext.setToAddress("sjkim@1thefull.com");
		mailContext.setSubject("테스트입니다.");
		mailContext.setMessage("asdfafa");
		mailService.sendMail(mailContext);
		return ResultWithData.succcessResult();
	}
	
}
